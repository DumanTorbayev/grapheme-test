{"version":3,"sources":["assets/images/grapheme-logo.svg","assets/images/verified.svg","components/Header.jsx","components/Delivery.jsx","components/Payment.jsx","components/Breadcrumb.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","href","src","logo","alt","Delivery","title","useForm","register","errors","handleSubmit","useState","checkCountry","setCheckCountry","redirect","setRedirect","to","action","onSubmit","data","htmlFor","recipient","id","type","name","ref","required","placeholder","city","address","defaultValue","validate","positive","value","index","pattern","Payment","setDone","upperCase","setUpperCase","payment","console","log","cardOwner","onChange","e","target","toUpperCase","mask","cardNumber","expirationDate","cvv","Breadcrumb","App","done","verified","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b73a001.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grapheme-logo.890a3279.svg\";","module.exports = __webpack_public_path__ + \"static/media/verified.33b1d305.svg\";","import React from 'react';\r\nimport logo from '../assets/images/grapheme-logo.svg'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <p className=\"header__title\">Тестовое задание</p>\r\n            <a href=\"#\" className=\"header__logo\"><img src={logo} alt=\"\"/></a>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Breadcrumb} from \"./index\";\r\n\r\nconst Delivery = ({title}) => {\r\n    const {register, errors, handleSubmit} = useForm();\r\n    const [checkCountry, setCheckCountry] = useState(false);\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    const onSubmit = data => {\r\n        setRedirect(true)\r\n    }\r\n\r\n    if (redirect) {\r\n        return <Redirect to=\"/payment\"/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb/>\r\n            <div className=\"form form--delivery\">\r\n                <h2 className=\"form__title\">{title}</h2>\r\n                <form action=\"\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className=\"form__field-wrap\">\r\n                        <label className=\"form__label\" htmlFor=\"recipient\">Получатель</label>\r\n                        <input className={`form__input ${errors.recipient ? 'has-error' : ''}`}\r\n                               id=\"recipient\"\r\n                               type=\"text\"\r\n                               name=\"recipient\"\r\n                               ref={register({required: true})}\r\n                               placeholder='ФИО'\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__field-wrap\">\r\n                        <label className=\"form__label\" htmlFor=\"address\">Адрес</label>\r\n                        <input className={`form__input ${errors.city ? 'has-error' : ''}`}\r\n                               id=\"address\"\r\n                               type=\"text\"\r\n                               name=\"city\"\r\n                               ref={register({required: true})}\r\n                               placeholder='Город'\r\n                        />\r\n                        <input className={`form__input ${errors.address ? 'has-error' : ''}`}\r\n                               placeholder='Адрес'\r\n                               name=\"address\"\r\n                               ref={register({required: true})}\r\n                        />\r\n                        <div className=\"d-flex align-items-center\">\r\n                            <select className={`form__select form__select--country ${checkCountry ? 'has-error' : ''}`}\r\n                                    name=\"country\"\r\n                                    defaultValue={'default'}\r\n                                    ref={register({\r\n                                        required: true,\r\n                                        validate: {\r\n                                            positive: value => {\r\n                                                if (value === 'default') {\r\n                                                    setCheckCountry(true)\r\n                                                } else {\r\n                                                    setCheckCountry(false)\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    })}\r\n                            >\r\n                                <option value=\"default\">Страна</option>\r\n                                <option value=\"russian\">Россия</option>\r\n                                <option value=\"kazakhstan\">Казахстан</option>\r\n                            </select>\r\n                            <input className={`form__input form__input--index ${errors.index ? 'has-error' : ''}`}\r\n                                   type=\"text\"\r\n                                   ref={register({\r\n                                       required: true,\r\n                                       pattern: /^\\d{6}$/\r\n                                   })}\r\n                                   placeholder='Индекс' name=\"index\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"form__btn\">Продолжить</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Delivery;","import React, {useState} from 'react';\r\nimport {useForm} from \"react-hook-form\";\r\nimport InputMask from \"react-input-mask\";\r\nimport {Breadcrumb} from \"./index\";\r\n\r\nconst Payment = ({title, setDone}) => {\r\n    const {register, errors, handleSubmit} = useForm();\r\n    const [upperCase, setUpperCase] = useState('');\r\n\r\n    const onUpperCase = (e) => {\r\n        setUpperCase(e.target.value.toUpperCase())\r\n    }\r\n\r\n    const onSubmit = data => {\r\n        console.log(data);\r\n        setDone(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb payment/>\r\n            <div className=\"form form--payment\">\r\n                <h2 className=\"form__title\">{title}</h2>\r\n                <form action=\"\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className=\"form__field-wrap\">\r\n                        <label className=\"form__label\" htmlFor=\"cardOwner\">Имя на карте</label>\r\n                        <input className={`form__input ${errors.cardOwner ? 'has-error' : ''}`}\r\n                               id=\"cardOwner\"\r\n                               type=\"text\"\r\n                               name=\"cardOwner\"\r\n                               value={upperCase}\r\n                               ref={register({\r\n                                   required: true,\r\n                                   pattern: /^[a-zA-Z\\s]+$/\r\n                               })}\r\n                               onChange={onUpperCase}\r\n                               placeholder=\"Konstantin Ivanov\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form__field-wrap\">\r\n                        <label className=\"form__label\" htmlFor=\"cardNumber\">Номер карты</label>\r\n                        <InputMask mask=\"9999 9999 9999 9999 9999\">\r\n                            <input className={`form__input ${errors.cardNumber ? 'has-error' : ''}`}\r\n                                   id=\"cardNumber\"\r\n                                   type=\"text\"\r\n                                   name=\"cardNumber\"\r\n                                   ref={register({required: true})}\r\n                                   placeholder=\"XXXX XXXX XXXX XXXX XXXX\"\r\n                            />\r\n                        </InputMask>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <div className=\"form__field-wrap form__field-wrap--w-30\">\r\n                            <label className=\"form__label\" htmlFor=\"cardNumber\">Срок</label>\r\n                            <InputMask mask=\"99 / 99\">\r\n                                <input className={`form__input ${errors.expirationDate ? 'has-error' : ''}`}\r\n                                       type=\"text\"\r\n                                       name=\"expirationDate\"\r\n                                       ref={register({required: true,})}\r\n                                       placeholder=\"MM / YY\"\r\n                                />\r\n                            </InputMask>\r\n                        </div>\r\n                        <div className=\"form__field-wrap form__field-wrap--w-30\">\r\n                            <label className=\"form__label\" htmlFor=\"cardNumber\">CVV</label>\r\n                            <input className={`form__input ${errors.cvv ? 'has-error' : ''}`}\r\n                                   type=\"text\"\r\n                                   name=\"cvv\"\r\n                                   ref={register({required: true, pattern: /^[0-9]{3,3}$/})}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"form__btn\">Оплатить</button>\r\n                </form>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Payment;","import React from 'react';\r\n\r\nconst Breadcrumb = ({payment}) => {\r\n    return (\r\n        <div className=\"breadcrumb\">\r\n            <span className={`breadcrumb__item ${!payment ? 'breadcrumb__item--active' : ''}`}>Доставка</span>\r\n            <span className={`breadcrumb__item ${payment ? 'breadcrumb__item--active' : ''}`}>Оплата</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Breadcrumb;","import React, {useState} from 'react';\nimport {Route} from \"react-router-dom\";\nimport {Header, Delivery, Payment} from \"./components\";\nimport verified from \"./assets/images/verified.svg\"\n\nfunction App() {\n    const [done, setDone] = useState(false);\n\n    return (\n        <>\n            <Header/>\n            <main className=\"main\">\n                <div className=\"form-container\">\n                    {!done\n                        ? <>\n                            <Route exact path='/' render={() => <Delivery title={'Информация для доставки'}/>}/>\n                            <Route exact path='/payment' render={() => <Payment title={'Оплата'} setDone={setDone}/>}/>\n                        </>\n                        : <div className=\"form__done\">\n                            <img src={verified} alt=\"\"/>\n                            <span className=\"form__done-text\">Спасибо!</span>\n                        </div>\n                    }\n                </div>\n            </main>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css/normalize.css'\nimport './scss/main.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter basename='/grapheme-test'>\n          <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}